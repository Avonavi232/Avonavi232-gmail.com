{"version":3,"sources":["containers/Chart/components/ChartLegend/styles.module.css","containers/Chart/containers/ChartDemoContainer/styles.module.css","containers/Chart/components/Chart/styles.module.css","components/Wrapper/Wrapper.ts","components/Header/styled.ts","components/Header/Header.tsx","components/Section/Section.ts","containers/Chart/contants/index.ts","containers/Chart/components/ChartLegend/ChartLegend.tsx","containers/Chart/components/Chart/Chart.tsx","containers/Chart/containers/ChartContainer/utils/getCanvasGradient.ts","containers/Chart/containers/ChartContainer/utils/chartConfiguration.ts","containers/Chart/containers/ChartContainer/utils/usePrepareChartConfig.ts","containers/Chart/containers/ChartContainer/utils/getChartLineGradient.ts","containers/Chart/containers/ChartContainer/ChartContainer.tsx","containers/Chart/containers/ChartContainer/utils/temp.ts","containers/Chart/containers/ChartDemoContainer/initialData.ts","components/ChartConfig/ChartConfig.tsx","containers/Chart/containers/ChartDemoContainer/ChartDemoContainer.tsx","styles/GlobalStyle.ts","index.tsx","containers/App/App.tsx"],"names":["module","exports","Wrapper","styled","div","StyledHeader","Header","displayName","Section","chartLegend","key","name","color","months","ChartLegend","className","styles","map","item","Chart","chartCanvasRef","style","height","ref","getCanvasGradient","ctx","stopColors","gradient","createLinearGradient","forEach","offset","addColorStop","BASE_CONFIG","type","data","datasets","borderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverRadius","pointRadius","pointHitRadius","order","stepped","options","responsive","maintainAspectRatio","legend","display","scales","x","ticks","fontColor","padding","maxRotation","stepSize","maxTicksLimit","lineHeight","gridLines","zeroLineColor","tick","label","borderDash","zeroLineBorderDash","tickMarkLength","afterTickToLabelConversion","scale","reduce","acc","dateObj","Date","value","getDate","push","getMonth","e","y","position","callback","drawBorder","elements","line","tension","borderWidth","point","layout","tooltips","enabled","backgroundColor","cornerRadius","caretSize","caretPadding","mode","intersect","callbacks","title","tooltipItems","date","getFullYear","tooltipItem","currentLabel","path","datasetIndex","plugins","datalabels","mergeDataWithBaseDataset","indexInBaseDataset","baseCfg","usePrepareChartConfig","React","gradients","gradientEstimatedPrice","getGradientEstimatedPrice","gradientOfferPrice","getGradientOfferPrice","valuationPrices","historyPrices","mergeDeepRight","labels","datesLabels","min","minChartPrice","max","maxChartPrice","ChartContainer","props","chartCtx","setChartCtx","chartRef","chartConfig","chartOptions","ChartLib","defaults","fontFamily","fontSize","current","getContext","update","ChartConfig","paddingLeft","onClick","handleSet","JSON","parse","ChartDemoContainer","setData","stringify","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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,WAAa,4BAC/BF,IAASC,SAASE,SAAW,KAC5B,IAGHzB,aAAgB,WAEd,GAAIzF,EAAemH,QAAS,CAC1B,IAAM9G,EAAML,EAAemH,QAAQC,WAAW,MAC9CT,EAAYtG,MAEb,IAEHoF,aAAgB,WACViB,GAAYG,IAGdD,EAASO,QAAU,IAAIJ,IAASL,EAAUG,MAE3C,CAACH,EAAUG,IAEdpB,aAAgB,WACVmB,EAASO,SACXP,EAASO,QAAQE,OAAOR,KAEzB,CAACJ,EAAMK,aAAcD,IAGtB,gBAAC,EAAD,CAAO7G,eAAgBA,KAI3BwG,EAAerH,YAAc,QC3CtB,IC8WM2H,EAAe,CAC1Bf,gBAlIiB,CACfaFC,cA3Pe,CACbsIFG,YArXa,CACX,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,cAgQFE,cAbe,SAcfE,cA/Pe,SCjHJe,G,MAA2C,SAAAb,GACtD,IAAMtG,EAAMsF,SAAa,MAEzB,OACE,uBAAKxF,MAAO,CAACsH,YAAa,SACxB,kCACA,4BAAUpH,IAAKA,GAAMsG,EAAM3F,MAC3B,yBACE,0BAAQ0G,QAAS,kBAAMf,EAAMgB,UAAUC,KAAKC,MAAMxH,EAAIgH,QAAQhE,UAA9D,+DAMRmE,EAAYnI,YAAc,c,qBCfbyI,EAA+B,SAAAnB,GAAU,IAAD,EAC3BhB,WAAeqB,GADY,mBAC5ChG,EAD4C,KACtC+G,EADsC,KAGnD,OACE,uBAAKlI,UAAWC,IAAM,WACpB,uBAAKD,UAAWC,IAAM,OACpB,gBAAC,EAAD,CAAgBkH,aAAchG,KAEhC,uBAAKnB,UAAWC,IAAM,QACpB,gBAAC,EAAD,CAAakB,KAAM4G,KAAKI,UAAUhH,GAAO2G,UAAWI,OAM5DD,EAAmBzI,YAAc,qB,yQClB1B,IAAM4I,EAAcC,YAAH,KCCxBC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAACJ,EAAD,MACA,mBCFe,WACf,OACI,2BACI,gBAACjJ,EAAD,KACE,gBAAC,EAAD,MAEA,gBAACM,EAAD,KACE,gBAAC,EAAD,WDLZ,OAEFgJ,SAASC,eAAe,W","file":"static/js/main.4550bbdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2MIkp\",\"title\":\"styles_title__2hCJr\",\"legend\":\"styles_legend__2kCGT\",\"legend-item\":\"styles_legend-item__1vdYR\",\"legend-sign\":\"styles_legend-sign__emfXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3k_dD\",\"chart\":\"styles_chart__2alaD\",\"config\":\"styles_config__nDvVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend\":\"styles_legend__lVSXF\",\"chart\":\"styles_chart__2kZAU\"};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 1366px;\n  padding: 0 16px;\n`;\n","import styled from 'styled-components';\n\nexport const StyledHeader = styled.div`\n  font-size: 24px;\n  padding: 16px 0;\n  border-bottom: 1px solid #eaeaea;\n`;\n","import * as React from 'react';\n\nimport {StyledHeader} from './styled';\n\nexport const Header: React.FC = () => {\n  return (\n    <StyledHeader>\n      Registration form\n    </StyledHeader>\n  );\n};\n\nHeader.displayName = 'Header';\n","import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 60px;\n  padding-bottom: 80px;\n`;\n","export const dayInMs = 86400000;\n\nexport const chartHeight = 186;\n\nexport const chartLegend = [\n  { key: 'offerPrice', name: 'В объявлении', color: '#FF1F34' },\n  { key: 'estimatedPrice', name: 'Рыночная цена', color: '#0468FF' },\n];\n\nexport const months = ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'];\n","import * as React from 'react';\nimport { chartLegend } from '../../contants';\n\nimport styles from './styles.module.css';\n\nexport const ChartLegend: React.FC = () => {\n  return (\n    <div className={styles['container']}>\n      <h4 className={styles['title']}>Изменение цены</h4>\n      <ul className={styles['legend']}>\n        {chartLegend.map(item => (\n          <li key={item.key} className={styles['legend-item']}>\n            <span className={styles['legend-sign']} />\n            <span>{item.name}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nChartLegend.displayName = 'ChartLegend';\n","import * as React from 'react';\n\nimport { ChartLegend } from '../ChartLegend';\n\nimport * as styles from './styles.module.css';\n\nexport interface IChartProps {\n  chartCanvasRef: React.RefObject<HTMLCanvasElement>;\n}\n\nexport const Chart: React.FC<IChartProps> = ({ chartCanvasRef }) => {\n  return (\n    <>\n      <div className={styles['legend']}>\n        <ChartLegend />\n      </div>\n      <div className={styles['chart']} style={{ height: 186 }}>\n        <canvas ref={chartCanvasRef} />\n      </div>\n    </>\n  );\n};\n\nChart.displayName = 'Chart';\n","import { chartHeight } from '../../../contants';\n\nexport const getCanvasGradient = (\n  ctx: CanvasRenderingContext2D,\n  stopColors: Array<{ offset: number; color: string }>,\n) => {\n  const gradient = ctx.createLinearGradient(0, 0, 0, chartHeight);\n\n  stopColors.forEach(({ offset, color }) => gradient.addColorStop(offset, color));\n\n  return gradient;\n};\n","import { ChartConfiguration, ChartData, ChartTooltipItem, ChartDataSets } from 'chart.js';\nimport { path } from 'ramda';\nimport { IChartScale, ITick } from '../../../types';\nimport { months } from '../../../contants';\n\nexport const yAxisTicksCb = (value: number) => (value === 0 ? '' : `${value} ₽`);\n\nexport const tooltipTitleCb = (tooltipItems: ChartTooltipItem[]): string => {\n  try {\n    const date = tooltipItems[0].label;\n    const dateObj = new Date(date);\n\n    return `${dateObj.getDate()} ${months[dateObj.getMonth()]} ${dateObj.getFullYear()}`;\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const tooltipLabelCb = (tooltipItem: ChartTooltipItem, data: ChartData): string => {\n  try {\n    let currentLabel = path(['datasets', tooltipItem.datasetIndex as number, 'label'], data) as string;\n\n    return `${currentLabel}: ${tooltipItem.value} ₽`;\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const afterTickToLabelConversion = (scale: IChartScale) => {\n  try {\n    scale.ticks = scale.ticks.reduce<IChartScale['ticks']>((acc, tick) => {\n      const dateObj = new Date(tick.value);\n      const date = dateObj.getDate();\n\n      if (date === 1) {\n        acc.push({ value: tick.value, label: months[dateObj.getMonth()] });\n      } else {\n        acc.push({ label: '', value: tick.value });\n      }\n\n      return acc;\n    }, []);\n  } catch (e) {\n    //оставляем пустым, т.к коллбэк ничего не должен возвращать\n  }\n};\n\nexport const verticalGridLineColorCb = ({ tick }: { tick: ITick }) =>\n  tick.label ? 'rgba(21, 34, 66, 0.1)' : 'transparent';\n\nexport const BASE_CONFIG: ChartConfiguration = {\n  type: 'line',\n  data: {\n    datasets: [\n      {\n        // https://www.chartjs.org/docs/next/charts/line.html#dataset-properties\n        borderColor: '#FF1F34',\n        pointHoverBackgroundColor: '#FF1F34',\n        pointHoverBorderColor: '#FF1F34',\n        pointHoverRadius: 4,\n        pointRadius: 0,\n        pointHitRadius: 4,\n        order: 1,\n        stepped: 'before',\n      },\n      {\n        borderColor: '#0468FF',\n        pointHoverBackgroundColor: '#0468FF',\n        pointHoverBorderColor: '#0468FF',\n        pointHoverRadius: 4,\n        pointRadius: 0,\n        pointHitRadius: 4,\n        order: 2,\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    scales: {\n      x: {\n        //https://www.chartjs.org/docs/next/axes/styling.html#grid-line-configuration\n        ticks: {\n          //see https://www.chartjs.org/docs/next/axes/radial/linear.html#tick-options\n          fontColor: 'rgba(21, 34, 66, 0.4)',\n          padding: 6,\n          // callback: xAxisTicksCb,\n          maxRotation: 0,\n          stepSize: 1,\n          maxTicksLimit: 120,\n          lineHeight: 1.5,\n        },\n        gridLines: {\n          //https://www.chartjs.org/docs/next/axes/styling.html#grid-line-configuration\n          zeroLineColor: 'rgba(21, 34, 66, 0.1)',\n          color: verticalGridLineColorCb,\n          borderDash: [3, 3],\n          zeroLineBorderDash: [3, 3],\n          tickMarkLength: 5,\n        },\n        afterTickToLabelConversion,\n      },\n      y: {\n        position: 'right',\n        offset: false,\n        ticks: {\n          //see https://www.chartjs.org/docs/next/axes/radial/linear.html#tick-options\n          fontColor: 'rgba(21, 34, 66, 0.4)',\n          padding: 12,\n          callback: yAxisTicksCb,\n          maxTicksLimit: 3,\n        },\n\n        gridLines: {\n          // https://www.chartjs.org/docs/next/axes/styling.html#grid-line-configuration\n          drawBorder: false,\n          color: 'rgba(21, 34, 66, 0.06)',\n          zeroLineColor: 'transparent',\n          tickMarkLength: 0,\n        },\n      },\n    },\n    elements: {\n      line: {\n        tension: 0,\n        borderWidth: 2,\n      },\n      point: {\n        borderWidth: 2,\n      },\n    },\n    layout: {\n      padding: 0,\n    },\n    tooltips: {\n      enabled: true,\n      backgroundColor: '#152242',\n      cornerRadius: 4,\n      caretSize: 0,\n      caretPadding: 12,\n      mode: 'index',\n      intersect: false,\n      callbacks: {\n        title: tooltipTitleCb,\n        label: tooltipLabelCb,\n      },\n    },\n    plugins: {\n      datalabels: {\n        display: false,\n      },\n    },\n  },\n};\n\n/**\n * Хелпер собирает объект из datasets, объединяя базовый конфиг и пользовательские настройки\n */\nexport const mergeDataWithBaseDataset = (indexInBaseDataset: number, options: ChartDataSets) => {\n  const baseCfg = path(['data', 'datasets', indexInBaseDataset], BASE_CONFIG) as object;\n\n  return {\n    ...baseCfg,\n    ...options,\n  };\n};\n","import * as React from 'react';\nimport { mergeDeepRight } from 'ramda';\nimport * as ChartLib from 'chart.js';\n\nimport { getGradientEstimatedPrice, getGradientOfferPrice } from './getChartLineGradient';\nimport { BASE_CONFIG, mergeDataWithBaseDataset } from './chartConfiguration';\nimport { IChartData } from '../../../types';\n\nexport const usePrepareChartConfig = (ctx: CanvasRenderingContext2D | null, options: IChartData) => {\n  return React.useMemo(() => {\n    if (!ctx) {\n      return null;\n    }\n\n    const gradientEstimatedPrice = getGradientEstimatedPrice(ctx);\n    const gradientOfferPrice = getGradientOfferPrice(ctx);\n    const gradients = { gradientEstimatedPrice, gradientOfferPrice };\n\n    const estimatedPriceDataset = mergeDataWithBaseDataset(1, {\n      data: options.valuationPrices,\n      label: 'Рыночная цена',\n      backgroundColor: gradients.gradientEstimatedPrice,\n    });\n\n    const offerPriceDataset = mergeDataWithBaseDataset(0, {\n      data: options.historyPrices,\n      label: 'В объявлении',\n      backgroundColor: gradients.gradientOfferPrice,\n    });\n    const datasets = [estimatedPriceDataset, offerPriceDataset];\n\n    return mergeDeepRight(BASE_CONFIG, {\n      data: {\n        labels: options.datesLabels,\n        datasets,\n      },\n      options: {\n        scales: {\n          y: {\n            min: options.minChartPrice,\n            max: options.maxChartPrice,\n          },\n        },\n      },\n    }) as ChartLib.ChartConfiguration;\n  }, [ctx, options]);\n};\n","import { getCanvasGradient } from './getCanvasGradient';\n\nexport const getGradientEstimatedPrice = (ctx: CanvasRenderingContext2D) =>\n  getCanvasGradient(ctx, [\n    { offset: 0.5, color: 'rgba(4, 104, 255, 0.24)' },\n    { offset: 1, color: 'rgba(4, 104, 255, 0)' },\n  ]);\n\nexport const getGradientOfferPrice = (ctx: CanvasRenderingContext2D) =>\n  getCanvasGradient(ctx, [\n    { offset: 0.5, color: 'rgba(255, 31, 52, 0.24)' },\n    { offset: 1, color: 'rgba(255, 31, 52, 0)' },\n  ]);\n","import * as React from 'react';\nimport ChartLib from 'chart.js';\n\nimport { Chart } from '../../components/Chart';\nimport { usePrepareChartConfig } from './utils/usePrepareChartConfig';\nimport {IChartContainerProps} from '../../types';\n\nexport const ChartContainer: React.FC<IChartContainerProps> = props => {\n  const chartCanvasRef = React.useRef<HTMLCanvasElement>(null);\n  const [chartCtx, setChartCtx] = React.useState<CanvasRenderingContext2D | null>(null);\n  const chartRef = React.useRef(null);\n\n  const chartConfig = usePrepareChartConfig(chartCtx, props.chartOptions);\n\n  //Глобальные настройки для chart.js\n  React.useEffect(() => {\n    ChartLib.defaults.fontFamily = 'Roboto, Arial, sans-serif';\n    ChartLib.defaults.fontSize = 12;\n  }, []);\n\n  //Сохраняем canvas context в стейт\n  React.useEffect(() => {\n    /*istanbul ignore else*/\n    if (chartCanvasRef.current) {\n      const ctx = chartCanvasRef.current.getContext('2d');\n      setChartCtx(ctx);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (chartCtx && chartConfig) {\n      //Возвращаемое значение в настоящий момент не требуется\n      // tslint:disable-next-line:no-unused-expression\n      chartRef.current = new ChartLib(chartCtx, chartConfig);\n    }\n  }, [chartCtx, chartConfig]);\n\n  React.useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.update(chartConfig);\n    }\n  }, [props.chartOptions, chartConfig]);\n\n  return (\n    <Chart chartCanvasRef={chartCanvasRef} />\n  );\n};\n\nChartContainer.displayName = 'Chart';\n","// tslint:disable: max-file-line-count\nimport { dayInMs } from '../../../contants';\n\n//TODO это тестовые данные, будут удалены в https://jira.cian.tech/browse/CD-77077\n\nexport const genData = (initial: number, n: number, from: number) => {\n  const data = [];\n\n  data.push(from === 0 ? initial : null);\n\n  for (let i = 0; i < n - 1; i++) {\n    if (i < from) {\n      data.push(null);\n      continue;\n    }\n    const rand = Math.sign(Math.random() - 0.5);\n    const part = initial * 0.06;\n    // @ts-ignore\n    const next = (data[data.length - 1] || initial) + rand * part;\n    data.push(Math.round(next));\n  }\n\n  return data;\n};\n\nexport const genLabels = (lastDate: string, n: number) => {\n  const date = new Date(lastDate);\n  const labels = [+date];\n\n  for (let i = 0; i < n - 1; i++) {\n    const newDate = labels[labels.length - 1] - dayInMs;\n\n    labels.push(newDate);\n  }\n\n  return labels.reverse();\n};\n\nconst a = {\n  datesLabels: [\n    '2019-12-01',\n    '2019-12-02',\n    '2019-12-03',\n    '2019-12-04',\n    '2019-12-05',\n    '2019-12-06',\n    '2019-12-07',\n    '2019-12-08',\n    '2019-12-09',\n    '2019-12-10',\n    '2019-12-11',\n    '2019-12-12',\n    '2019-12-13',\n    '2019-12-14',\n    '2019-12-15',\n    '2019-12-16',\n    '2019-12-17',\n    '2019-12-18',\n    '2019-12-19',\n    '2019-12-20',\n    '2019-12-21',\n    '2019-12-22',\n    '2019-12-23',\n    '2019-12-24',\n    '2019-12-25',\n    '2019-12-26',\n    '2019-12-27',\n    '2019-12-28',\n    '2019-12-29',\n    '2019-12-30',\n    '2019-12-31',\n    '2020-01-01',\n    '2020-01-02',\n    '2020-01-03',\n    '2020-01-04',\n    '2020-01-05',\n    '2020-01-06',\n    '2020-01-07',\n    '2020-01-08',\n    '2020-01-09',\n    '2020-01-10',\n    '2020-01-11',\n    '2020-01-12',\n    '2020-01-13',\n    '2020-01-14',\n    '2020-01-15',\n    '2020-01-16',\n    '2020-01-17',\n    '2020-01-18',\n    '2020-01-19',\n    '2020-01-20',\n    '2020-01-21',\n    '2020-01-22',\n    '2020-01-23',\n    '2020-01-24',\n    '2020-01-25',\n    '2020-01-26',\n    '2020-01-27',\n    '2020-01-28',\n    '2020-01-29',\n    '2020-01-30',\n    '2020-01-31',\n    '2020-02-01',\n    '2020-02-02',\n    '2020-02-03',\n    '2020-02-04',\n    '2020-02-05',\n    '2020-02-06',\n    '2020-02-07',\n    '2020-02-08',\n    '2020-02-09',\n    '2020-02-10',\n    '2020-02-11',\n    '2020-02-12',\n    '2020-02-13',\n    '2020-02-14',\n    '2020-02-15',\n    '2020-02-16',\n    '2020-02-17',\n    '2020-02-18',\n    '2020-02-19',\n    '2020-02-20',\n    '2020-02-21',\n    '2020-02-22',\n    '2020-02-23',\n    '2020-02-24',\n    '2020-02-25',\n    '2020-02-26',\n    '2020-02-27',\n    '2020-02-28',\n    '2020-02-29',\n    '2020-03-01',\n    '2020-03-02',\n    '2020-03-03',\n    '2020-03-04',\n    '2020-03-05',\n    '2020-03-06',\n    '2020-03-07',\n    '2020-03-08',\n    '2020-03-09',\n    '2020-03-10',\n    '2020-03-11',\n    '2020-03-12',\n    '2020-03-13',\n    '2020-03-14',\n    '2020-03-15',\n    '2020-03-16',\n    '2020-03-17',\n    '2020-03-18',\n    '2020-03-19',\n    '2020-03-20',\n    '2020-03-21',\n    '2020-03-22',\n    '2020-03-23',\n    '2020-03-24',\n    '2020-03-25',\n    '2020-03-26',\n    '2020-03-27',\n  ],\n  historyPrices: [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n  ],\n  minChartPrice: 34673750,\n  valuationPrices: [\n    36220000,\n    36186100,\n    36152200,\n    36118300,\n    36084400,\n    36050500,\n    36016600,\n    35982700,\n    35948800,\n    35914900,\n    35881000,\n    35847100,\n    35813200,\n    35779300,\n    35745400,\n    35711500,\n    35677600,\n    35643700,\n    35609800,\n    35575900,\n    35542000,\n    35508100,\n    35474200,\n    35440300,\n    35406400,\n    35372500,\n    35338600,\n    35304700,\n    35270800,\n    35236900,\n    35203000,\n    35170000,\n    35193500,\n    35217000,\n    35240500,\n    35264000,\n    35287500,\n    35311000,\n    35334500,\n    35358000,\n    35381500,\n    35405000,\n    35428500,\n    35452000,\n    35475500,\n    35499000,\n    35522500,\n    35546000,\n    35569500,\n    35593000,\n    35616500,\n    35640000,\n    35663500,\n    35687000,\n    35710500,\n    35734000,\n    35757500,\n    35781000,\n    35804500,\n    35828000,\n    35851500,\n    35875000,\n    35900000,\n    35927900,\n    35955800,\n    35983700,\n    36011600,\n    36039500,\n    36067400,\n    36095300,\n    36123200,\n    36151100,\n    36179000,\n    36206900,\n    36234800,\n    36262700,\n    36290600,\n    36318500,\n    36346400,\n    36374300,\n    36402200,\n    36430100,\n    36458000,\n    36485900,\n    36513800,\n    36541700,\n    36569600,\n    36597500,\n    36625400,\n    36653300,\n    36681200,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n  ],\n  maxChartPrice: 37072000,\n};\n\nexport const estimatedPriceData = a.valuationPrices;\nexport const offerPriceData = a.historyPrices;\nexport const labels = a.datesLabels;\nexport const minChartPrice = a.minChartPrice;\nexport const maxChartPrice = a.maxChartPrice;\n","const a = {\n  datesLabels: [\n    '2019-12-01',\n    '2019-12-02',\n    '2019-12-03',\n    '2019-12-04',\n    '2019-12-05',\n    '2019-12-06',\n    '2019-12-07',\n    '2019-12-08',\n    '2019-12-09',\n    '2019-12-10',\n    '2019-12-11',\n    '2019-12-12',\n    '2019-12-13',\n    '2019-12-14',\n    '2019-12-15',\n    '2019-12-16',\n    '2019-12-17',\n    '2019-12-18',\n    '2019-12-19',\n    '2019-12-20',\n    '2019-12-21',\n    '2019-12-22',\n    '2019-12-23',\n    '2019-12-24',\n    '2019-12-25',\n    '2019-12-26',\n    '2019-12-27',\n    '2019-12-28',\n    '2019-12-29',\n    '2019-12-30',\n    '2019-12-31',\n    '2020-01-01',\n    '2020-01-02',\n    '2020-01-03',\n    '2020-01-04',\n    '2020-01-05',\n    '2020-01-06',\n    '2020-01-07',\n    '2020-01-08',\n    '2020-01-09',\n    '2020-01-10',\n    '2020-01-11',\n    '2020-01-12',\n    '2020-01-13',\n    '2020-01-14',\n    '2020-01-15',\n    '2020-01-16',\n    '2020-01-17',\n    '2020-01-18',\n    '2020-01-19',\n    '2020-01-20',\n    '2020-01-21',\n    '2020-01-22',\n    '2020-01-23',\n    '2020-01-24',\n    '2020-01-25',\n    '2020-01-26',\n    '2020-01-27',\n    '2020-01-28',\n    '2020-01-29',\n    '2020-01-30',\n    '2020-01-31',\n    '2020-02-01',\n    '2020-02-02',\n    '2020-02-03',\n    '2020-02-04',\n    '2020-02-05',\n    '2020-02-06',\n    '2020-02-07',\n    '2020-02-08',\n    '2020-02-09',\n    '2020-02-10',\n    '2020-02-11',\n    '2020-02-12',\n    '2020-02-13',\n    '2020-02-14',\n    '2020-02-15',\n    '2020-02-16',\n    '2020-02-17',\n    '2020-02-18',\n    '2020-02-19',\n    '2020-02-20',\n    '2020-02-21',\n    '2020-02-22',\n    '2020-02-23',\n    '2020-02-24',\n    '2020-02-25',\n    '2020-02-26',\n    '2020-02-27',\n    '2020-02-28',\n    '2020-02-29',\n    '2020-03-01',\n    '2020-03-02',\n    '2020-03-03',\n    '2020-03-04',\n    '2020-03-05',\n    '2020-03-06',\n    '2020-03-07',\n    '2020-03-08',\n    '2020-03-09',\n    '2020-03-10',\n    '2020-03-11',\n    '2020-03-12',\n    '2020-03-13',\n    '2020-03-14',\n    '2020-03-15',\n    '2020-03-16',\n    '2020-03-17',\n    '2020-03-18',\n    '2020-03-19',\n    '2020-03-20',\n    '2020-03-21',\n    '2020-03-22',\n    '2020-03-23',\n    '2020-03-24',\n    '2020-03-25',\n    '2020-03-26',\n    '2020-03-27',\n  ],\n  maxChartPrice: 37852000,\n  historyPrices: [\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    31000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000000,\n    33000500,\n    33000500,\n    33000500,\n    33000500,\n    33000500,\n    33000500,\n    33000500,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    35000000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n    34900000,\n  ],\n  valuationPrices: [\n    36220000,\n    36186100,\n    36152200,\n    36118300,\n    36084400,\n    36050500,\n    36016600,\n    35982700,\n    35948800,\n    35914900,\n    35881000,\n    35847100,\n    35813200,\n    35779300,\n    35745400,\n    35711500,\n    35677600,\n    35643700,\n    35609800,\n    35575900,\n    35542000,\n    35508100,\n    35474200,\n    35440300,\n    35406400,\n    35372500,\n    35338600,\n    35304700,\n    35270800,\n    35236900,\n    35203000,\n    35170000,\n    35193500,\n    35217000,\n    35240500,\n    35264000,\n    35287500,\n    35311000,\n    35334500,\n    35358000,\n    35381500,\n    35405000,\n    35428500,\n    35452000,\n    35475500,\n    35499000,\n    35522500,\n    35546000,\n    35569500,\n    35593000,\n    35616500,\n    35640000,\n    35663500,\n    35687000,\n    35710500,\n    35734000,\n    35757500,\n    35781000,\n    35804500,\n    35828000,\n    35851500,\n    35875000,\n    35900000,\n    35927900,\n    35955800,\n    35983700,\n    36011600,\n    36039500,\n    36067400,\n    36095300,\n    36123200,\n    36151100,\n    36179000,\n    36206900,\n    36234800,\n    36262700,\n    36290600,\n    36318500,\n    36346400,\n    36374300,\n    36402200,\n    36430100,\n    36458000,\n    36485900,\n    36513800,\n    36541700,\n    36569600,\n    36597500,\n    36625400,\n    36653300,\n    36681200,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n    36710000,\n  ],\n  minChartPrice: 30286250,\n};\n\nexport const valuationPrices = a.valuationPrices;\nexport const historyPrices = a.historyPrices;\nexport const datesLabels = a.datesLabels;\nexport const minChartPrice = a.minChartPrice;\nexport const maxChartPrice = a.maxChartPrice;\n\nexport const chartOptions = {\n  valuationPrices,\n  historyPrices,\n  datesLabels,\n  minChartPrice,\n  maxChartPrice,\n}\n\n\n","import * as React from 'react';\nimport { IChartData } from '../../containers/Chart/types';\n\ninterface IChartConfigProps {\n  data: string;\n  handleSet(IChartData): void\n}\n\nexport const ChartConfig: React.FC<IChartConfigProps> = props => {\n  const ref = React.useRef(null);\n\n  return (\n    <div style={{paddingLeft: '24px'}}>\n      <h4>data</h4>\n      <textarea ref={ref}>{props.data}</textarea>\n      <p>\n        <button onClick={() => props.handleSet(JSON.parse(ref.current.value))}>Применить!</button>\n      </p>\n    </div>\n  );\n};\n\nChartConfig.displayName = 'ChartConfig';\n","import * as React from 'react';\nimport {ChartContainer} from '../ChartContainer';\nimport {chartOptions} from './initialData';\nimport {ChartConfig} from '../../../../components/ChartConfig';\n\nimport styles from './styles.module.css';\n\nexport const ChartDemoContainer: React.FC = props => {\n  const [data, setData] = React.useState(chartOptions);\n\n  return (\n    <div className={styles['container']} >\n      <div className={styles['chart']} >\n        <ChartContainer chartOptions={data} />\n      </div>\n      <div className={styles['config']}>\n        <ChartConfig data={JSON.stringify(data)} handleSet={setData}/>\n      </div>\n    </div>\n  );\n};\n\nChartDemoContainer.displayName = 'ChartDemoContainer';\n","import { createGlobalStyle } from 'styled-components';\n\nimport './stylesheet.css';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: Roboto;\n    margin: 0;\n    padding: 0;\n    color: #1c1e21;\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './containers/App';\nimport {GlobalStyle} from './styles';\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyle/>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n","import * as React from 'react';\nimport {Wrapper} from '../../components/Wrapper';\nimport {Header} from '../../components/Header';\nimport {Section} from '../../components/Section';\nimport {ChartDemoContainer} from '../Chart/containers/ChartDemoContainer/ChartDemoContainer';\n\nexport const App = () => {\n    return (\n        <div>\n            <Wrapper>\n              <Header/>\n\n              <Section>\n                <ChartDemoContainer/>\n              </Section>\n            </Wrapper>\n        </div>\n    );\n};\n"],"sourceRoot":""}